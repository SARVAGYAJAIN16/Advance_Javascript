 Explore about  promises method in javascript.                                     
 ------>
 Using the Promise Constructor (Class):

 You can create a promise using the Promise constructor. This involves creating a new instance of the Promise class, which takes a function as an argument.
 This function, often referred to as the "executor function," takes two parameters: resolve and reject. You call resolve when the asynchronous operation is successful
 and reject when it encounters an error.

 real life example

 todo  1:  default state is pending

todo 2:  Promise Made:  Your friend promises to call you after 2 days at 6 pm. This is similar to creating a promise in JavaScript.

todo 3:  Pending Stage:  During the 2-day period, you're in a "pending" stage. You're not sure whether your friend will fulfill the promise (call you) or
break the promise (not call you). Similarly, when you create a promise in JavaScript, it starts in a pending state until it either resolves (fulfills) or rejects.

todo 4: Resolution at a Specific Time:  After 2 days and exactly at 6 pm, you'll know whether the promise is fulfilled (resolved) if your friend calls you, 
or if it's broken (rejected) if your friend doesn't call. This aligns with the idea that promises in JavaScript resolve or reject, often triggered by asynchronous 
operations, at a specific point in time.

2: Using a Function (Promise Wrapper):

 You can also create a promise by defining a function that returns a promise. This function usually encapsulates some asynchronous operation.
 Inside this function, you manually create a promise and resolve or reject it based on the result of the asynchronous operation.

// syntax
// function myPromiseFunction() {
//   return new Promise((resolve, reject) => {
//     // Asynchronous operations here
//     // If successful, call resolve(value)
//     // If there's an error, call reject(error)
//   });
// }

 1: By default promise has the pending state
 2: the moment we use setTimeout, we need to handle promises, we can do using then and catch

  Promise Methods

 Promise.all is used when you want to wait for all promises to complete successfully. Reject state will throw an error.

 Promise.allSettled is used when you want to wait for all promises to complete, regardless of success or failure, and get information about their outcomes.

 Promise.race is used when you are interested in the result of the first promise that completes, regardless of success or failure.

 code:---------------------------------------------------
 // Promise method....

// 1 Promise.all
const promise1 = new Promise((resolve) => {
   setTimeout(() => resolve("first"),2000)
});

const promise2 = new Promise((resolve) => {
    setTimeout(() => resolve("second"),5000) // remember jab tak maximum time complete nahi hu jata jab tak ya(other) wait karenga sara.. 
 });
 
 const promise3 = new Promise((resolve) => {
    setTimeout(() => resolve("third"),2000)
 });
 
 Promise.all([promise1,promise2,promise3]) // the order you give on same order it will show output
 .then((value) => {
    console.log(value);
 })
 .catch((error) => {
    console.log(error);
 });

 // output [ 'first', 'second', 'third' ]  

 // if  we do reject and set time for 3000 then we have to wait 
 // for 3 sec and then result also get failed.(in 'all' all have to be resolved. )

 // using .allSettled instead of .all

 // 2  Promise.allSettled
 Promise.allSettled([promise1,promise2,promise3])
 .then((value) => {
    console.log(value);
 })
.catch((error) => {
   console.error(error);
});
// output 
//[
//  { status: 'fulfilled', value: 'first' },
//  { status: 'fulfilled', value: 'second' },
//  { status: 'fulfilled', value: 'third' }
//]

// 3 Promise.race // to whom we set less time whether it is success or failure it will give to whom who have less time.
Promise.race([promise1,promise2,promise3])
.then ((value) => {
    console.log(value);
})
.catch((error) => {
    console.error(error);
});
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 Explore about Timing Based Events in JavaScriptâ€¦
 1. setTimeout:
 The setTimeout function is used to execute a function or code block after a specified delay in milliseconds.

// function delayedFunction(x) {
//   console.log("This function was delayed by 2000 milliseconds (2 seconds).", x);
// }

// setTimeout(delayedFunction, 2000);
// setTimeout(() => delayedFunction(5), 2000);

 2. setInterval:
 The setInterval function is used to repeatedly execute a function or code block at a specified interval in milliseconds.

 ex- mind game of counting seconds on mind and after every 5secs we need to draw a straight line on paper.
// and it will continue till I told you to stop

// function repeatedFunction() {
//   console.log(
//     "This function will be repeated every 1000 milliseconds (1 second)."
//   );
// }

// setInterval(repeatedFunction, 1000);

 3. Clearing Timeout with clearTimeout:
 If you want to cancel a scheduled timeout before it occurs, you can use the clearTimeout function.

 The global clearTimeout() method cancels a timeout previously established by calling setTimeout().

// Syntax:
//* clearTimeout(timeoutID);

// function delayedFunction() {
//   console.log("This function was delayed by 2000 milliseconds (2 seconds).");
// }
// const myWork = setTimeout(delayedFunction, 2000);
// clearTimeout(myWork);

//todo Cancel the timeout before it occurs

 4. Clearing Interval with clearInterval:
 If you want to cancel a scheduled interval before it occurs, you can use the clearInterval function.

 The global clearInterval() method cancels a timeout previously established by calling setInterval().

// Syntax:
// clearInterval(intervalID);

// function repeatedFunction() {
//   console.log("This function repeats every 1000 milliseconds (1 second).");
// }

// const intervalID = setInterval(repeatedFunction, 1000);

// clearInterval(intervalID);

//todo Cancel the interval


 Challenge Time
//! Write a JavaScript program that defines a function called repeatedFunction. This function should log the message "This function
repeats every 1000 milliseconds (1 second)" to the console. Then, set up an interval using setInterval() to call repeatedFunction every 1000 milliseconds. 
Additionally, after 5 seconds have elapsed, use setTimeout() to clear the interval previously set up. Make sure to log the message "Interval cleared after 5 seconds."
when the interval is cleared.

code:--------------------------------------------------------------------------------------------------------------------------
// timing based Event in JavaScript.

// 1:  setTimeout:
function delayedFunction()
{
    console.log("This function was delayed by 2000 millseconds(2 sec).");
}
setTimeout(delayedFunction,2000);

// if we have to pass value or parameter then.
function delayedFunction(x)
{
    console.log("This function was delayed by 2000 millseconds(2 sec).",x);
}
setTimeout(delayedFunction,2000);
setTimeout(() => delayedFunction(5),2000);

// 2 setInterval 
function repeatedFunction()
{
    console.log(" This function will be repeated 1000 ms (1 sec).");
}

//setInterval(repeatedFunction,1000); 
// comment because it will run in every 1 sec.

//3 Clearing Interval with clearInterval:
function repeatedFunction()
{
    console.log("This function repeat every 1000 ms (1 sec).");
}
const intervalID = setInterval(repeatedFunction,1000);
clearInterval(intervalID);
// here in output nothing will come.
// to overcome this .....
// solving que on notes.. challenge problem..

//  Write a JavaScript program that defines a function called repeatedFunction. This function should log the 
// message "This function repeats every 1000 milliseconds (1 second)" to the console. Then, set up an interval 
// using setInterval() to call repeatedFunction every 1000 milliseconds.  Additionally, after 5 seconds have elapsed, use setTimeout() to 
// clear the interval previously set up. Make sure to log the message "Interval cleared after 5 seconds." when the interval is cleared.

const repeatedFunction = () => {
   console.log("This function repeat every 1000 ms(1 sec).");
};
repeatedFunction(); // this we write again because after 1 sec it will print 
// so at after 5 sec, only 4  times it will print but we want in 5 sec 5 times 
// it will print so we call the function here.
const intervalId = setInterval(repeatedFunction,1000);

setTimeout(() => {
    clearInterval(intervalId);
},5000);
--------------------------------------------------------------------------------------------------------


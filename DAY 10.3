Explore about Async Await and error handling in js.
------>
  Async Await in Js

 async and await are JavaScript keywords introduced in ECMAScript 2017 (ES8) that make asynchronous code look and behave more like synchronous code,
 making it easier to write, read, and reason about asynchronous operations. 

 async Function Declaration: The async keyword is used to declare an asynchronous function. An asynchronous function returns a Promise implicitly, 
 even if the return value is not explicitly wrapped in a Promise. Inside an asynchronous function, you can use the await keyword to pause the execution 
 of code until a Promise is resolved or rejected. 

 await Operator: The await keyword is used to pause the execution of an async function until a Promise is settled (resolved or rejected).
 It can only be used inside an async function. When await is used with a Promise, it waits for the Promise to resolve and returns the resolved value. 
 If the Promise is rejected, it throws an error that can be caught using a try...catch block.

    Error Handling

   In JavaScript, the try...catch statement is used for error handling. It allows you to catch and   handle exceptions (errors) that occur within a block of code.
   Here's how it works:

  try Block: The try block contains the code that you want to execute. It is the block of code where you anticipate that an error might occur. 

  catch Block: The catch block follows the try block and is used to catch any exceptions (errors) that occur within the try block. 
  If an exception occurs, JavaScript jumps to the catch block to handle the error. The catch block takes an error object as a parameter,
  which can be used to access information about the error, such as its message or stack trace. 

 finally Block (Optional): The finally block, if provided, is executed regardless of whether an error occurs or not. 
 It is typically used for cleanup tasks that should always be performed, such as closing resources or releasing locks. 

 
